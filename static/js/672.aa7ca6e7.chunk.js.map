{"version":3,"file":"static/js/672.aa7ca6e7.chunk.js","mappings":"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","sources":["../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../node_modules/date-fns/esm/toDate/index.js","webpack://react-homework-template/./src/components/OurFriends/FriendsCards.module.css?fdc9","components/OurFriends/FriendsCards.jsx","../node_modules/date-fns/esm/getDay/index.js","../node_modules/date-fns/esm/getDate/index.js","../node_modules/date-fns/esm/getMonth/index.js","../node_modules/date-fns/esm/getYear/index.js","../node_modules/date-fns/esm/isWithinInterval/index.js","services/friends.js","webpack://react-homework-template/./src/styles/OurFriendsPage.module.css?2fdf","pages/OurFriendsPage.jsx"],"sourcesContent":["export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\");\n      // eslint-disable-next-line no-console\n      console.warn(new Error().stack);\n    }\n    return new Date(NaN);\n  }\n}","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"FriendsCards_list__A0P3X\",\"card\":\"FriendsCards_card__2nOll\",\"title\":\"FriendsCards_title__3L7B8\",\"columnContainer\":\"FriendsCards_columnContainer__bwgu3\",\"imgContainer\":\"FriendsCards_imgContainer__K40SA\",\"img\":\"FriendsCards_img__iz75W\",\"info\":\"FriendsCards_info__c4Na2\",\"infoItem\":\"FriendsCards_infoItem__ludOp\",\"label\":\"FriendsCards_label__-v44Z\",\"labelNoInfo\":\"FriendsCards_labelNoInfo__AgTvE\",\"time\":\"FriendsCards_time__yDRZ-\",\"text\":\"FriendsCards_text__LD4VJ\",\"textNoInfo\":\"FriendsCards_textNoInfo__QGOva\",\"workingHoursBlock\":\"FriendsCards_workingHoursBlock__C9IVu\",\"tableColumn\":\"FriendsCards_tableColumn__G9Q6j\"};","import React, { useState } from 'react';\nimport { getDate, getDay, getMonth, getYear, isWithinInterval } from 'date-fns';\n\nimport css from './FriendsCards.module.css';\n\nexport default function FriendsCards({ sponsors }) {\n  const [visibleCardIndex, setVisibleCardIndex] = useState(null);\n  const now = new Date();\n  const currentDay = getDay(now); // 0: Sunday, 1: Monday, ..., 6: Saturday\n  const currentNumberDay = getDate(now);\n  const currentMonth = getMonth(now);\n  const currentYear = getYear(now);\n\n  // Check if the shop is open now\n  const isOpenNow = hours => {\n    if (!hours?.isOpen) return;\n\n    return isWithinInterval(now, {\n      start: new Date(\n        currentYear,\n        currentMonth,\n        currentNumberDay,\n        parseInt(hours.from.split(':')[0]),\n        parseInt(hours.from.split(':')[1])\n      ),\n      end: new Date(\n        currentYear,\n        currentMonth,\n        currentNumberDay,\n        parseInt(hours.to.split(':')[0]),\n        parseInt(hours.to.split(':')[1])\n      ),\n    });\n  };\n\n  const getDayName = dayIndex => {\n    const daysOfWeek = ['MN', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU'];\n    return daysOfWeek[dayIndex];\n  };\n\n  // Helper function to format the time without leading zero\n  const formatTime = time => {\n    if (!time) return '';\n\n    const [hour, minute] = time.split(':').map(str => parseInt(str, 10));\n    return `${hour}:${minute.toString().padStart(2, '0')}`;\n  };\n\n  // Toggle the display of working hours for the specific card\n  const handleToggleWorkingHours = index => {\n    setVisibleCardIndex(index === visibleCardIndex ? null : index);\n  };\n\n  return (\n    <>\n      <ul className={css.list}>\n        {sponsors.map(\n          (\n            {\n              _id,\n              title,\n              url,\n              addressUrl,\n              imageUrl,\n              address,\n              workDays,\n              phone,\n              email,\n            },\n            index\n          ) => {\n            return (\n              <li key={_id} className={css.card}>\n                <a href={url} className={css.title} target=\"blanc\">\n                  {title}\n                </a>\n                <div className={css.columnContainer}>\n                  <div className={css.imgContainer}>\n                    <img\n                      src={\n                        imageUrl ||\n                        'https://static.vecteezy.com/system/resources/previews/000/618/739/original/cute-little-kitten-vector.jpg'\n                      }\n                      alt=\"Logo\"\n                      className={css.img}\n                    />\n                  </div>\n                  <ul className={css.info}>\n                    <li\n                      className={css.infoItem}\n                      onClick={() => handleToggleWorkingHours(index)}\n                    >\n                      {workDays ? (\n                        <div className={css.time}>\n                          <p className={css.label}>Time:</p>\n                          {isOpenNow(workDays[currentDay]) ? (\n                            <p className={css.text}>Is currently open</p>\n                          ) : (\n                            <p className={css.text}>Closed</p>\n                          )}\n                        </div>\n                      ) : (\n                        <>\n                          <p className={css.labelNoInfo}>Time:</p>\n                          <p className={css.textNoInfo}>No information</p>\n                        </>\n                      )}\n                      {workDays && index === visibleCardIndex && (\n                        <div className={css.workingHoursBlock}>\n                          <table className={css.workingHoursTable}>\n                            <tbody>\n                              {workDays.map((day, dayIndex) => (\n                                <tr key={dayIndex}>\n                                  <td className={css.tableColumn}>\n                                    {getDayName(dayIndex)}\n                                  </td>\n                                  <td>\n                                    {formatTime(day.from)} -{' '}\n                                    {formatTime(day.to)}\n                                  </td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </table>\n                        </div>\n                      )}\n                    </li>\n                    <li className={css.infoItem}>\n                      <p className={css.label}>Adress:</p>\n                      <a\n                        href={addressUrl}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className={css.text}\n                      >\n                        {address || 'website only'}\n                      </a>\n                    </li>\n                    {email && (\n                      <li className={css.infoItem}>\n                        <p className={css.label}>Email:</p>\n                        <a href=\"mailto:{email}\" className={css.text}>\n                          {email}\n                        </a>\n                      </li>\n                    )}\n                    {phone && (\n                      <li className={css.infoItem}>\n                        <p className={css.label}>Phone:</p>\n                        <a href=\"tel:{phone}\" className={css.text}>\n                          {phone}\n                        </a>\n                      </li>\n                    )}\n                  </ul>\n                </div>\n              </li>\n            );\n          }\n        )}\n      </ul>\n    </>\n  );\n}\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDay\n * @category Weekday Helpers\n * @summary Get the day of the week of the given date.\n *\n * @description\n * Get the day of the week of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the week is 29 February 2012?\n * const result = getDay(new Date(2012, 1, 29))\n * //=> 3\n */\nexport default function getDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDate\n * @category Day Helpers\n * @summary Get the day of the month of the given date.\n *\n * @description\n * Get the day of the month of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the month is 29 February 2012?\n * const result = getDate(new Date(2012, 1, 29))\n * //=> 29\n */\nexport default function getDate(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = date.getDate();\n  return dayOfMonth;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getMonth\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which month is 29 February 2012?\n * const result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */\nexport default function getMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  return month;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @param {Date|Number} date - the date to check\n * @param {Interval} interval - the interval to check\n * @returns {Boolean} the date is within the interval\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date }) // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end }) // => true\n */\nexport default function isWithinInterval(dirtyDate, interval) {\n  requiredArgs(2, arguments);\n  var time = toDate(dirtyDate).getTime();\n  var startTime = toDate(interval.start).getTime();\n  var endTime = toDate(interval.end).getTime();\n\n  // Throw an exception if start date is after end date or if any date is `Invalid Date`\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n  return time >= startTime && time <= endTime;\n}","import axios from 'axios';\n\nconst fetchFriends = async () => {\n  const response = await axios.get('/friends');\n  return response.data;\n};\n\nexport default fetchFriends;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"OurFriendsPage_container__YtCyY\",\"title\":\"OurFriendsPage_title__b3yc2\"};","import { useState, useEffect } from 'react';\nimport FriendsCards from '../components/OurFriends/FriendsCards';\nimport fetchFriends from '../services/friends';\nimport Loader from '../components/Loader/Loader';\n\nimport css from '../styles/OurFriendsPage.module.css';\n\nimport BackgroundColor from '../components/shared/BackgroundColor';\n\nexport default function OurFriendsPage() {\n  const [friends, setFriends] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchFriends()\n      .then(response => {\n        setFriends(response);\n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <BackgroundColor>\n      <div className={css.container}>\n        <h1 className={css.title}>Our Friends</h1>\n        {friends.length > 0 && <FriendsCards sponsors={friends} />}\n      </div>\n    </BackgroundColor>\n  );\n}\n"],"names":["requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","Object","prototype","toString","call","Date","_typeof","getTime","console","warn","Error","stack","NaN","FriendsCards","sponsors","useState","visibleCardIndex","setVisibleCardIndex","now","currentDay","dirtyDate","getDay","currentNumberDay","getDate","currentMonth","getMonth","currentYear","getFullYear","getYear","isOpenNow","hours","isOpen","interval","time","startTime","start","endTime","end","RangeError","isWithinInterval","parseInt","from","split","to","getDayName","dayIndex","formatTime","map","str","hour","minute","padStart","className","css","index","_id","title","url","addressUrl","imageUrl","address","workDays","phone","email","href","target","src","alt","onClick","handleToggleWorkingHours","day","rel","fetchFriends","axios","response","data","OurFriendsPage","friends","setFriends","isLoading","setIsLoading","useEffect","then","catch","error","log","Loader","BackgroundColor"],"sourceRoot":""}